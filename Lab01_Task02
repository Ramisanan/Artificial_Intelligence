# CSE422
def find_shortest_path(edges, initial, target, track=[]):
    track = track + [initial]
    if initial == target:
        return track
    shortest = None
    for nodes in edges[initial]:
        if nodes not in track:
            new_path = find_shortest_path(edges, nodes, target, track)
            if new_path:
                if not shortest or len(new_path) < len(shortest):
                    shortest = new_path
    return shortest


if __name__ == "__main__":
    graphs = {'0': ['1', '2', '3'],
              '1': ['3', '4'],
              '2': ['3'],
              '3': ['5'],
              '4': ['8', '7'],
              '5': ['6'],
              '6': ['7'],
              '7': ['8']}

Nora_path = find_shortest_path(graphs, '5', '7')
# start position of Nora is 5
# lina's position is at 7

Lara_path = find_shortest_path(graphs, '3', '7')
# start position of Lara is 3
# Lina's position is at 7

count_Nora = 1
count_Lara = 1
for q in Nora_path:
    count_Nora += 1
for k in Lara_path:
    count_Lara += 1
if count_Nora >= count_Lara:
    print("Lara is a winner!!")
else:
    print("Nora is a winner!!‚Äù)
